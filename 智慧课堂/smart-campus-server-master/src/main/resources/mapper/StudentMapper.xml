<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.core.mapper.StudentMapper">

    <resultMap type="com.core.entity.Student" id="StudentResult">
        <result property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="clazzId" column="clazz_id"/>
        <result property="num" column="num"/>
        <result property="name" column="name"/>
        <result property="gender" column="gender"/>
        <result property="age" column="age"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <sql id="selectStudentVo">
        select id, user_id, clazz_id, num, name, gender, age, create_time from student
    </sql>

    <select id="selectStudentList" parameterType="com.core.entity.Student" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        <where>
            <if test="userId != null ">
                and user_id = #{userId}
            </if>
            <if test="clazzId != null ">
                and clazz_id = #{clazzId}
            </if>
            <if test="num != null ">
                and num = #{num}
            </if>
            <if test="name != null  and name != ''">
                and name like concat('%', #{name}, '%')
            </if>
            <if test="gender != null  and gender != ''">
                and gender = #{gender}
            </if>
            <if test="age != null ">
                and age = #{age}
            </if>
            <if test="createTime != null ">
                and create_time = #{createTime}
            </if>
        </where>
        ORDER BY create_time DESC
    </select>

    <select id="selectStudentById" parameterType="Long" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        where id = #{id}
    </select>

    <insert id="insertStudent" parameterType="com.core.entity.Student" useGeneratedKeys="true" keyProperty="id">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                user_id,
            </if>
            <if test="clazzId != null">
                clazz_id,
            </if>
            <if test="num != null">
                num,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="age != null">
                age,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">
                #{userId},
            </if>
            <if test="clazzId != null">
                #{clazzId},
            </if>
            <if test="num != null">
                #{num},
            </if>
            <if test="name != null">
                #{name},
            </if>
            <if test="gender != null">
                #{gender},
            </if>
            <if test="age != null">
                #{age},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
        </trim>
    </insert>

    <update id="updateStudent" parameterType="com.core.entity.Student">
        update student
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="clazzId != null">
                clazz_id = #{clazzId},
            </if>
            <if test="num != null">
                num = #{num},
            </if>
            <if test="name != null">
                name = #{name},
            </if>
            <if test="gender != null">
                gender = #{gender},
            </if>
            <if test="age != null">
                age = #{age},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteStudentById" parameterType="Long">
        delete from student where id = #{id}
    </delete>

    <delete id="deleteStudentByIds" parameterType="String">
        delete from student where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

</mapper>
